"""API views for social_network."""

from rest_framework import generics
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework.reverse import reverse

from .models import Profile, Post
from .serializers import ProfileSerializer, PostSerializer


@api_view(['GET'])
def api_root(request, format=None):
    """Root of API, this is useful for documentation generated by DRF."""
    return Response({
        'profiles': reverse('profile-list', request=request, format=format),
        'posts': reverse('post-list', request=request, format=format)
    })


class ProfileList(generics.ListAPIView):
    """List Profiles.

    Using ListAPIView not ListCreateAPIView since we want this to be read-only.
    """

    queryset = Profile.objects.all()
    serializer_class = ProfileSerializer


class ProfileDetail(generics.RetrieveAPIView):
    """Get an individual Profile."""

    queryset = Profile.objects.all()
    serializer_class = ProfileSerializer


class PostList(generics.ListCreateAPIView):
    """List Posts, or create a new one.

    This uses the DRF ListCreateAPIView for simplicity, since we are doing normal REST operations,
    we can delegate all the work to DRF and our custom PostSerializer class for our specific
    business logic in this case.
    """

    queryset = Post.objects.all()
    serializer_class = PostSerializer


class PostDetail(generics.RetrieveUpdateDestroyAPIView):
    """Get/update/delete a single Post.

    This also uses the convenience RetrieveUpdateDestroyAPIView from DRF.
    Although the class contents are the same as PostList, it differs in the methods provided. In
    this case, the REST operations we allow are GET, PUT and DELETE (the only logical operations
    that can be performed on a single Post instance).
    """

    queryset = Post.objects.all()
    serializer_class = PostSerializer
